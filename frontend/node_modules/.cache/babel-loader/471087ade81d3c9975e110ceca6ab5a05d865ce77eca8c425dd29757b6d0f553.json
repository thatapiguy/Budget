{"ast":null,"code":"// Make sure this IP matches your server's IP address\nconst API_URL = 'http://192.168.68.88:3001/api'; // Use localhost for local network access\n\n// Transactions API\nexport const transactionsApi = {\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/transactions`);\n      const data = await response.json();\n      console.log('Fetched transactions:', data);\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  },\n  create: async data => {\n    try {\n      console.log('Sending transaction data:', data);\n      const response = await fetch(`${API_URL}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      const result = await response.json();\n      console.log('Transaction create response:', result);\n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to create transaction');\n      }\n      return result;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  },\n  update: async (id, data) => {\n    const response = await fetch(`${API_URL}/transactions/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  },\n  delete: async id => {\n    const response = await fetch(`${API_URL}/transactions/${id}`, {\n      method: 'DELETE'\n    });\n    return response.json();\n  }\n};\n\n// Budgets API\nexport const budgetsApi = {\n  getAll: async () => {\n    const response = await fetch(`${API_URL}/budgets`);\n    return response.json();\n  },\n  create: async data => {\n    const response = await fetch(`${API_URL}/budgets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  },\n  update: async (id, data) => {\n    const response = await fetch(`${API_URL}/budgets/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  }\n};\n\n// Add accounts API\nexport const accountsApi = {\n  getAll: async () => {\n    const response = await fetch(`${API_URL}/accounts`);\n    return response.json();\n  },\n  create: async data => {\n    const response = await fetch(`${API_URL}/accounts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  },\n  updateBalance: async (id, current_balance) => {\n    const response = await fetch(`${API_URL}/accounts/${id}/balance`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        current_balance\n      })\n    });\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","transactionsApi","getAll","response","fetch","data","json","console","log","error","create","method","headers","body","JSON","stringify","result","ok","Error","update","id","delete","budgetsApi","accountsApi","updateBalance","current_balance"],"sources":["/Users/thatapiguy/Budget/frontend/src/services/api.ts"],"sourcesContent":["// Make sure this IP matches your server's IP address\nconst API_URL = 'http://192.168.68.88:3001/api';  // Use localhost for local network access\n\nexport interface TransactionData {\n  account_id: number;  // Add this field\n  category: string;\n  amount: number;\n  date: string;\n  description: string;\n}\n\nexport interface BudgetData {\n  id?: number;\n  category: string;\n  amount: number;\n  period: 'monthly' | 'annual';\n  year?: number;\n}\n\nexport interface AccountData {\n  id?: number;\n  name: string;\n  type: string;\n  starting_balance: number;\n  current_balance: number;\n}\n\n// Transactions API\nexport const transactionsApi = {\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/transactions`);\n      const data = await response.json();\n      console.log('Fetched transactions:', data);\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  },\n\n  create: async (data: TransactionData) => {\n    try {\n      console.log('Sending transaction data:', data);\n      const response = await fetch(`${API_URL}/transactions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      const result = await response.json();\n      console.log('Transaction create response:', result);\n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to create transaction');\n      }\n      return result;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  },\n\n  update: async (id: number, data: TransactionData) => {\n    const response = await fetch(`${API_URL}/transactions/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  },\n\n  delete: async (id: number) => {\n    const response = await fetch(`${API_URL}/transactions/${id}`, {\n      method: 'DELETE',\n    });\n    return response.json();\n  },\n};\n\n// Budgets API\nexport const budgetsApi = {\n  getAll: async (): Promise<BudgetData[]> => {\n    const response = await fetch(`${API_URL}/budgets`);\n    return response.json();\n  },\n\n  create: async (data: BudgetData) => {\n    const response = await fetch(`${API_URL}/budgets`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  },\n\n  update: async (id: number, data: BudgetData) => {\n    const response = await fetch(`${API_URL}/budgets/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  },\n};\n\n// Add accounts API\nexport const accountsApi = {\n  getAll: async (): Promise<AccountData[]> => {\n    const response = await fetch(`${API_URL}/accounts`);\n    return response.json();\n  },\n\n  create: async (data: Omit<AccountData, 'id' | 'current_balance'>) => {\n    const response = await fetch(`${API_URL}/accounts`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  },\n\n  updateBalance: async (id: number, current_balance: number) => {\n    const response = await fetch(`${API_URL}/accounts/${id}/balance`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ current_balance }),\n    });\n    return response.json();\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}